When would you want to use a remote repository rather than keeping all your work
local?

    It would be helpful to use a remote repository when working on different computers, for example a workstation at work and a laptop at home.  It would also be helpful when working with other developers on the same code base.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You might want to always pull changes manually from your remote repository in case you or someone else has made changes on the remote that would conflict with your local copy at the moment.  It may turn out you don't want those changes or that they need to be carefully merged with your local working copy.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork makes a clone of a repository on GitHub from one user's space to another user's space.  A clone copies a repository from GitHub or another URL to your local computer.  A branch is a local copy of a project at a certain commit. A fork is used to make your own copy (or another copy) on GitHub of a repository on GitHub, so you can make your own changes without modifying the original repository (for which you may not have permission). A clone is used to make a copy on your own computer of a remote repository, so you can make modifications on your own computer.  A branch is used locally when you want to make a separate copy of the repository to modify without changing the master branch, such as to try out an experimental feature or refactor the code base.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The main benefit is that you can see what changes you have made locally, since the last time you synced with the remote. This enables git to tell you when your copy is ahead, behind or out of sync with the remote copy.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would share copies of changed source files with colleagues.  In general we would take turns checking into subbversion, so that the responsibility of merging fell to each person as they checked in changes.  Usually, we would try to work in separate source files at any given time. Some version control systems force that by locking files that are checked out.  The git approach makes it much easier for two or more people to make changes concurrently in the same file, but it can still end up being messy to merge many changes.  It may be harder, if you have to wait for someone to approve every change you make.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You would want to make changes in a separate branch, if your changes could interfere with the changes other programmers are making. The benefit of working in a branch is that you don't have to worry about how your work is affecting others, but it's more work to merge your changes back into the master branch.
