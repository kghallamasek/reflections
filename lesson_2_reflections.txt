What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository a .git directory is created to contain the git metadata.  This step is done to create the repository and start tracking your files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area contains only those files from the working directory that you have chosen to add to the repository (before they are actually committed).  Having a staging area gives you the option to change which files you will commit, before you actually commit them.

How can you use the staging area to make sure you have one commit per logical
change?

	You can only add the files that comprise a logical change to the staging area and then commit.  Any other changes in your working directory will still be uncommitted.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful when trying out an experimental change or when making another basically parallel version of the program with some minor change, such as language or difficulty.  Branches allow you to make changes, try them and then decide whether to merge the changes back into the master branch, keep them as separate version or discard them altogether -- all without changing the master branch.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
